(**************************************************************************)
(*                                                                        *)
(*    Copyright (c) 2017       .                                          *)
(*    Fabrice Le Fessant, OCamlPro SAS <fabrice@lefessant.net>            *)
(*                                                                        *)
(*    All rights reserved. No warranty, explicit or implicit, provided.   *)
(*                                                                        *)
(**************************************************************************)

(* Most of this code is from Tezos, so we use include files and a submodule *)

if( with_tezos ) {

ocaml.debug = true;

compflags = [ "-bin-annot"; "-g"; "-thread"; "-short-paths"; "-safe-string";
                "-w"; "+27-30-40"; ];

tezos_dir = "../../tezos/src/";

(* Some functions to declare Tezos dependencies created by including source
  files with #include *)
function pp_tezos(file){
  return file, { more_deps = [ tezos_dir + file ] };
}

function pp_proto_client(file){
  return file, { more_deps = [ tezos_dir + "proto_002_PsYLVpVv/lib_client/" + file ] };
}

function pp_stdlib(file){
  return file, { more_deps = [ tezos_dir + "lib_stdlib/" + file ] };
}

function pp_base(file){
  return file, { more_deps = [ tezos_dir + "lib_base/" + file ] };
}

function pp_crypto(file){
  return file, { more_deps = [ tezos_dir + "lib_crypto/" + file ] };
}

function from_tezos(file){
  return tezos_dir + file;
}


OCaml.library("michelson",
  ocaml + {
     bytelink = [ "-custom" ];
     pp = [ "ocp-pp" ];
     files = OCaml.pack("Michelson_Tezos", [
        from_tezos("lib_stdlib/compare.ml");
        from_tezos("lib_stdlib/option.ml");
        from_tezos("lib_stdlib/mBytes.ml");
        from_tezos("lib_stdlib/tzList.ml");
        from_tezos("lib_stdlib/tzString.ml");
        from_tezos("lib_stdlib/utils.ml");
        from_tezos("lib_stdlib/binary_stream.ml");
        from_tezos("lib_data_encoding/binary_size.ml");
        from_tezos("lib_data_encoding/encoding.ml");
        from_tezos("lib_data_encoding/binary_error.ml");
        from_tezos("lib_data_encoding/binary_length.ml");
        from_tezos("lib_data_encoding/binary_reader.ml");
        from_tezos("lib_data_encoding/binary_writer.ml");
        from_tezos("lib_data_encoding/binary_stream_reader.ml");
        from_tezos("lib_data_encoding/json.ml");
        from_tezos("lib_data_encoding/bson.ml");
        from_tezos("lib_data_encoding/binary_schema.ml");
        from_tezos("lib_data_encoding/binary_description.ml");
        from_tezos("lib_data_encoding/data_encoding.ml");
        from_tezos("lib_stdlib/tag.ml");
        from_tezos("lib_stdlib/logging.ml");
        from_tezos("lib_stdlib/lwt_utils.ml");
        from_tezos("lib_stdlib/lwt_canceler.ml");
        from_tezos("lib_error_monad/error_monad_sig.ml");
        from_tezos("lib_error_monad/error_monad.ml");
        from_tezos("lib_micheline/micheline.ml");
        from_tezos("lib_micheline/micheline_parser.ml");
        from_tezos("lib_micheline/micheline_printer.ml");
        "tezos_micheline.ml";
        "data_encoding_ezjsonm.ml";
        from_tezos("lib_crypto/base58.ml");
        pp_crypto("blake2B.ml");
        "ed25519.ml";
        "tezos_crypto.ml";
        pp_crypto("operation_hash.ml");
        pp_proto_client("michelson_v1_macros.ml");
     ]);
     requires = [
              "michelson-deps";
              "ocplib-json-typed";
              "ocplib-json-typed-bson"; (* data_encoding *)
              "ocplib-endian";     (* data_encoding *)
              "ocplib-endian.bigstring";
              "bigstring";
              "calendar";
              "hex";
              "lwt_log";
     ];
   });

}

