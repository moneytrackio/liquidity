(****************************************************************************)
(*                               Liquidity                                  *)
(*                                                                          *)
(*                  Copyright (C) 2017-2019 OCamlPro SAS                    *)
(*                                                                          *)
(*                    Authors: Fabrice Le Fessant                           *)
(*                             Alain Mebsout                                *)
(*                             David Declerck                               *)
(*                                                                          *)
(*  This program is free software: you can redistribute it and/or modify    *)
(*  it under the terms of the GNU General Public License as published by    *)
(*  the Free Software Foundation, either version 3 of the License, or       *)
(*  (at your option) any later version.                                     *)
(*                                                                          *)
(*  This program is distributed in the hope that it will be useful,         *)
(*  but WITHOUT ANY WARRANTY; without even the implied warranty of          *)
(*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *)
(*  GNU General Public License for more details.                            *)
(*                                                                          *)
(*  You should have received a copy of the GNU General Public License       *)
(*  along with this program.  If not, see <https://www.gnu.org/licenses/>.  *)
(****************************************************************************)

(*
   A contract is compiled as followed:
   1) it is parsed by the OCaml compiler parser (compiler-libs)
   2) the AST is translated to a simple untyped AST in [LiquidOCaml]
   3) the untyped AST is typechecked in [LiquidCheck], number of uses
       for each variable is computed, and a list of one-use variables
       to be inlined is computed
   4) one-use variables are inlined, and their def sites are removed,
      in [LiquidSimplify] (optional pass)
   5) the untyped AST is translated to symbolic Michelson in
      [LiquidMichelson]
   6) symbolic Michelson is simplified, mostly to decrease the size of
      the stack. The pass is mostly optional, except the removal of
      expressions after FAIL.
   7) the symbolic Michelson is translated to raw Michelson in
      [LiquidEmit]
   8) the raw Michelson is finally printed in [LiquidPrinter]

*)

if(with_version){
  version_info = { ocp2ml=true;
                             env_strings = [
                                "ocp::commit";
                                "ocp::dates";
                                ]; };
} else {
  version_info = {};
}

OCaml.library("ocplib-liquidity-bare",
   ocaml + {
     files = [

       "liquidOptions.ml";
       "liquidVersion.ml", version_info;
       "liquidMisc.ml";

       "liquidTypes.ml";
       "liquidNumber.ml";
     ];
     requires = [
       "zarith";
     ];

   });


OCaml.library("ocplib-liquidity-parser",
   ocaml + {
     files = [
       "ocaml/liquidOCamlParser.mly";
       "ocaml/liquidOCamlLexer.mll";
       "ocaml/liquidOCamlParse.ml";
       "ocaml/liquidOCamlPrinter.ml";

       "reason/reason_string.ml";
       "reason/reason_attributes.ml";
       "reason/reason_syntax_util.mli";
       "reason/reason_syntax_util.ml";
       "reason/reason_config.ml";
       "reason/reason_parser.mly", { ocamlyacc= [ "menhir"; "--table"] };
       "reason/reason_comment.ml";
       "reason/lexer_warning.ml";
       "reason/reason_lexer.mll";
       "reason/reason_location.ml";
       "reason/reason_layout.ml";
       "reason/reason_heuristics.ml";
       "reason/reason_pprint_ast.ml"; 
       "reason/reason_toolchain.ml";
       "reason/liquidReasonParse.ml";

       "liquidLoc.ml";
       "liquidParse.ml";
     ];
     requires = [
        "easy-format";
        "ocaml-migrate-parsetree";
        "menhirLib";
        "ocplib-liquidity-bare";
        "compiler-libs.common";
     ];

   });



OCaml.library("ocplib-liquidity-base",
   ocaml + {
     files = [

       "iSO8601.ml";

       "liquidBoundVariables.ml";
       "liquidNamespace.ml";

       "liquidEmit.ml";
       "liquidPeephole.ml";
       "liquidToParsetree.ml";
       "liquidPrinter.ml";
       "liquidInfer.ml";
       "liquidCheck.ml";
       "liquidSimplify.ml";
       "liquidEncode.ml";
       "liquidDecode.ml";
       "liquidMichelson.ml";
       "liquidFromParsetree.ml";
       "liquidData.ml";

       "liquidClean.ml";
       "liquidInterp.ml";
       "liquidUntype.ml";
     ];
     requires = [
       "ocplib-liquidity-parser";
     ];

   });


if ( with_tezos ) {
OCaml.library("ocplib-liquidity-with-tezos",
   ocaml + {
     files = [
       "with-tezos/liquidTezosTypes.ml";
       "with-tezos/liquidFromTezos.ml";
       "with-tezos/liquidToTezos.ml";
       "liquidDecomp.ml";
     ];
     requires = [
        "ocplib-liquidity-base";
        "ocplib-liquidity-parser";
        "michelson";
     ];
   });

OCaml.library("ocplib-liquidity-deploy",
   ocaml + {
     files = [
       "liquidInit.ml";
       "liquidDeploy.ml";
     ];
     requires = [
       "ocplib-liquidity-with-tezos";
       "ocplib-liquidity-parser";
       "curl";
       "curl.lwt";
     ];
   });

if (for_javascript) {
OCaml.program("liquidity",
   ocaml + {
     files = [
       "liquidDot.ml";
       "liquidMain.ml";
     ];
     requires = [
       "ocplib-dot";
       "ocplib-liquidity-deploy";
       "ocplib-file";
     ];
   });
} else {
OCaml.program("liquidity",
   ocaml + {
     bytelink = ["-cclib"; "-lsodium_stubs -lsodium"];
     files = [
       "liquidDot.ml";
       "liquidMain.ml";
     ];
     requires = [
       "ocplib-dot";
       "ocplib-liquidity-deploy";
       "ocplib-file";
       "threads";
     ];
   });
}
}

OCaml.library("ocplib-liquidity-without-tezos",
   ocaml + {
     files = [
       "without-tezos/liquidTezosTypes.ml";
       "without-tezos/liquidFromTezos.ml";
       "without-tezos/liquidToTezos.ml";
       "liquidDecomp.ml";
     ];
     requires = [
        "ocplib-liquidity-base";
        "ocplib-liquidity-parser";
     ];
   });

OCaml.library("ocplib-liquidity-deploy-without-tezos",
   ocaml + {
     files = [
       "without-tezos/liquidDeploy.ml";
     ];
     requires = [
       "ocplib-liquidity-base";
       "ocplib-fake-lwt"
     ];
   });

OCaml.program("liquidity-mini",
   ocaml + {
     files = [
       "liquidInit.ml";
       "liquidDot.ml";
       "liquidMain.ml";
     ];
     requires = [
       "ocplib-dot";
       "ocplib-liquidity-deploy-without-tezos";
       "ocplib-liquidity-without-tezos";
       "ocplib-liquidity-base";
       "ocplib-file";
     ];

   });
